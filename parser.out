Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    COMMENTLINE
    NUM
    READ
    DIV
    MINUSMINUS
    PRINT
    PRED
    SUCC
    COLON
    EXIT
    AND
    SYN
    TRUE
    GE
    DIVEQ
    PLUSPLUS
    NOTEQUAL
    RBRACKET
    PLUS
    LOWER
    RETURN
    COMMENT
    PROC
    RESULT
    DO
    NOT
    RPAREN
    GT
    LE
    FOR
    ISEQUAL
    REF
    ELSIF
    END
    TYPE
    RETURNS
    FALSE
    LOC
    MOD
    PLUSEQ
    DOWN
    LBRACE
    LPAREN
    ARRAY
    LBRACKET
    CHARCONST
    LT
    BY
    TO
    FI
    IF
    TIMES
    ELSE
    THEN
    MINUS
    NULL
    MODEQ
    PERIOD
    STRCONC
    STRINGCONST
    OR
    WHILE
    OD
    LENGTH
    RBRACE
    CHARS
    UPPER
    TIMESEQ
    IN
    MINUSEQ

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     program -> empty
Rule 3     statement_list -> statement
Rule 4     statement_list -> statement_list statement
Rule 5     statement -> declaration_statement
Rule 6     declaration_statement -> DCL declaration_list SMC
Rule 7     declaration_list -> declaration
Rule 8     declaration_list -> declaration_list COMMA declaration
Rule 9     declaration -> id_list mode initialization
Rule 10    declaration -> id_list mode
Rule 11    id_list -> ID
Rule 12    id_list -> id_list COMMA ID
Rule 13    mode -> INT
Rule 14    mode -> BOOL
Rule 15    mode -> CHAR
Rule 16    mode_name -> ID
Rule 17    discrete_mode -> INT
Rule 18    discrete_mode -> BOOL
Rule 19    discrete_mode -> CHAR
Rule 20    initialization -> EQUALS INTCONST
Rule 21    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ARRAY                : 
ARROW                : 
BOOL                 : 14 18
BY                   : 
CHAR                 : 15 19
CHARCONST            : 
CHARS                : 
COLON                : 
COMMA                : 8 12
COMMENT              : 
COMMENTLINE          : 
DCL                  : 6
DIV                  : 
DIVEQ                : 
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUALS               : 20
EXIT                 : 
FALSE                : 
FI                   : 
FOR                  : 
GE                   : 
GT                   : 
ID                   : 11 12 16
IF                   : 
IN                   : 
INT                  : 13 17
INTCONST             : 20
ISEQUAL              : 
LBRACE               : 
LBRACKET             : 
LE                   : 
LENGTH               : 
LOC                  : 
LOWER                : 
LPAREN               : 
LT                   : 
MINUS                : 
MINUSEQ              : 
MINUSMINUS           : 
MOD                  : 
MODEQ                : 
NOT                  : 
NOTEQUAL             : 
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 
PERIOD               : 
PLUS                 : 
PLUSEQ               : 
PLUSPLUS             : 
PRED                 : 
PRINT                : 
PROC                 : 
RBRACE               : 
RBRACKET             : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 
SMC                  : 6
STRCONC              : 
STRINGCONST          : 
SUCC                 : 
SYN                  : 
THEN                 : 
TIMES                : 
TIMESEQ              : 
TO                   : 
TRUE                 : 
TYPE                 : 
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

declaration          : 7 8
declaration_list     : 6 8
declaration_statement : 5
discrete_mode        : 
empty                : 2
id_list              : 9 10 12
initialization       : 9
mode                 : 9 10
mode_name            : 
program              : 0
statement            : 3 4
statement_list       : 1 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) program -> . empty
    (3) statement_list -> . statement
    (4) statement_list -> . statement_list statement
    (21) empty -> .
    (5) statement -> . declaration_statement
    (6) declaration_statement -> . DCL declaration_list SMC

    $end            reduce using rule 21 (empty -> .)
    DCL             shift and go to state 1

    empty                          shift and go to state 2
    declaration_statement          shift and go to state 3
    statement_list                 shift and go to state 4
    program                        shift and go to state 5
    statement                      shift and go to state 6

state 1

    (6) declaration_statement -> DCL . declaration_list SMC
    (7) declaration_list -> . declaration
    (8) declaration_list -> . declaration_list COMMA declaration
    (9) declaration -> . id_list mode initialization
    (10) declaration -> . id_list mode
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 7

    declaration                    shift and go to state 9
    declaration_list               shift and go to state 10
    id_list                        shift and go to state 8

state 2

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 3

    (5) statement -> declaration_statement .

    DCL             reduce using rule 5 (statement -> declaration_statement .)
    $end            reduce using rule 5 (statement -> declaration_statement .)


state 4

    (1) program -> statement_list .
    (4) statement_list -> statement_list . statement
    (5) statement -> . declaration_statement
    (6) declaration_statement -> . DCL declaration_list SMC

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 1

    declaration_statement          shift and go to state 3
    statement                      shift and go to state 11

state 5

    (0) S' -> program .



state 6

    (3) statement_list -> statement .

    DCL             reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)


state 7

    (11) id_list -> ID .

    COMMA           reduce using rule 11 (id_list -> ID .)
    INT             reduce using rule 11 (id_list -> ID .)
    BOOL            reduce using rule 11 (id_list -> ID .)
    CHAR            reduce using rule 11 (id_list -> ID .)


state 8

    (9) declaration -> id_list . mode initialization
    (10) declaration -> id_list . mode
    (12) id_list -> id_list . COMMA ID
    (13) mode -> . INT
    (14) mode -> . BOOL
    (15) mode -> . CHAR

    COMMA           shift and go to state 13
    INT             shift and go to state 16
    BOOL            shift and go to state 14
    CHAR            shift and go to state 12

    mode                           shift and go to state 15

state 9

    (7) declaration_list -> declaration .

    SMC             reduce using rule 7 (declaration_list -> declaration .)
    COMMA           reduce using rule 7 (declaration_list -> declaration .)


state 10

    (6) declaration_statement -> DCL declaration_list . SMC
    (8) declaration_list -> declaration_list . COMMA declaration

    SMC             shift and go to state 18
    COMMA           shift and go to state 17


state 11

    (4) statement_list -> statement_list statement .

    DCL             reduce using rule 4 (statement_list -> statement_list statement .)
    $end            reduce using rule 4 (statement_list -> statement_list statement .)


state 12

    (15) mode -> CHAR .

    EQUALS          reduce using rule 15 (mode -> CHAR .)
    SMC             reduce using rule 15 (mode -> CHAR .)
    COMMA           reduce using rule 15 (mode -> CHAR .)


state 13

    (12) id_list -> id_list COMMA . ID

    ID              shift and go to state 19


state 14

    (14) mode -> BOOL .

    EQUALS          reduce using rule 14 (mode -> BOOL .)
    SMC             reduce using rule 14 (mode -> BOOL .)
    COMMA           reduce using rule 14 (mode -> BOOL .)


state 15

    (9) declaration -> id_list mode . initialization
    (10) declaration -> id_list mode .
    (20) initialization -> . EQUALS INTCONST

    SMC             reduce using rule 10 (declaration -> id_list mode .)
    COMMA           reduce using rule 10 (declaration -> id_list mode .)
    EQUALS          shift and go to state 20

    initialization                 shift and go to state 21

state 16

    (13) mode -> INT .

    EQUALS          reduce using rule 13 (mode -> INT .)
    SMC             reduce using rule 13 (mode -> INT .)
    COMMA           reduce using rule 13 (mode -> INT .)


state 17

    (8) declaration_list -> declaration_list COMMA . declaration
    (9) declaration -> . id_list mode initialization
    (10) declaration -> . id_list mode
    (11) id_list -> . ID
    (12) id_list -> . id_list COMMA ID

    ID              shift and go to state 7

    declaration                    shift and go to state 22
    id_list                        shift and go to state 8

state 18

    (6) declaration_statement -> DCL declaration_list SMC .

    DCL             reduce using rule 6 (declaration_statement -> DCL declaration_list SMC .)
    $end            reduce using rule 6 (declaration_statement -> DCL declaration_list SMC .)


state 19

    (12) id_list -> id_list COMMA ID .

    COMMA           reduce using rule 12 (id_list -> id_list COMMA ID .)
    INT             reduce using rule 12 (id_list -> id_list COMMA ID .)
    BOOL            reduce using rule 12 (id_list -> id_list COMMA ID .)
    CHAR            reduce using rule 12 (id_list -> id_list COMMA ID .)


state 20

    (20) initialization -> EQUALS . INTCONST

    INTCONST        shift and go to state 23


state 21

    (9) declaration -> id_list mode initialization .

    SMC             reduce using rule 9 (declaration -> id_list mode initialization .)
    COMMA           reduce using rule 9 (declaration -> id_list mode initialization .)


state 22

    (8) declaration_list -> declaration_list COMMA declaration .

    SMC             reduce using rule 8 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 8 (declaration_list -> declaration_list COMMA declaration .)


state 23

    (20) initialization -> EQUALS INTCONST .

    SMC             reduce using rule 20 (initialization -> EQUALS INTCONST .)
    COMMA           reduce using rule 20 (initialization -> EQUALS INTCONST .)

