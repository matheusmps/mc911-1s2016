Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    OR
    TO
    LOWER
    PRED
    ELSE
    RBRACE
    EQUALS
    ARRAY
    MINUSMINUS
    CHARCONST
    LBRACE
    ARROW
    UPPER
    CHAR
    PROC
    REF
    DIVEQ
    AND
    PERIOD
    DIV
    MINUSEQ
    RESULT
    RETURN
    NUM
    RBRACKET
    SYN
    SUCC
    TIMES
    PRINT
    PLUSEQ
    READ
    GE
    MOD
    THEN
    LENGTH
    BOOL
    NOTEQUAL
    COMMENT
    STRCONC
    LPAREN
    RPAREN
    BY
    MINUS
    TIMESEQ
    EXIT
    END
    MODEQ
    STRINGCONST
    DO
    LT
    RETURNS
    FOR
    FALSE
    TYPE
    DOWN
    ELSIF
    FI
    CHARS
    COMMENTLINE
    IN
    NOT
    PLUS
    ISEQUAL
    NULL
    TRUE
    GT
    WHILE
    INT
    COLON
    LBRACKET
    IF
    LOC
    INTCONST
    OD
    PLUSPLUS
    LE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement statement
Rule 3     statement -> declaration_statement
Rule 4     declaration_statement -> DCL declaration_list SMC
Rule 5     declaration_list -> declaration
Rule 6     declaration_list -> declaration COMMA declaration_list
Rule 7     declaration -> id_list
Rule 8     id_list -> ID
Rule 9     id_list -> id_list COMMA ID

Terminals, with rules where they appear

AND                  : 
ARRAY                : 
ARROW                : 
BOOL                 : 
BY                   : 
CHAR                 : 
CHARCONST            : 
CHARS                : 
COLON                : 
COMMA                : 6 9
COMMENT              : 
COMMENTLINE          : 
DCL                  : 4
DIV                  : 
DIVEQ                : 
DO                   : 
DOWN                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQUALS               : 
EXIT                 : 
FALSE                : 
FI                   : 
FOR                  : 
GE                   : 
GT                   : 
ID                   : 8 9
IF                   : 
IN                   : 
INT                  : 
INTCONST             : 
ISEQUAL              : 
LBRACE               : 
LBRACKET             : 
LE                   : 
LENGTH               : 
LOC                  : 
LOWER                : 
LPAREN               : 
LT                   : 
MINUS                : 
MINUSEQ              : 
MINUSMINUS           : 
MOD                  : 
MODEQ                : 
NOT                  : 
NOTEQUAL             : 
NULL                 : 
NUM                  : 
OD                   : 
OR                   : 
PERIOD               : 
PLUS                 : 
PLUSEQ               : 
PLUSPLUS             : 
PRED                 : 
PRINT                : 
PROC                 : 
RBRACE               : 
RBRACKET             : 
READ                 : 
REF                  : 
RESULT               : 
RETURN               : 
RETURNS              : 
RPAREN               : 
SMC                  : 4
STRCONC              : 
STRINGCONST          : 
SUCC                 : 
SYN                  : 
THEN                 : 
TIMES                : 
TIMESEQ              : 
TO                   : 
TRUE                 : 
TYPE                 : 
UPPER                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

declaration          : 5 6
declaration_list     : 4 6
declaration_statement : 3
id_list              : 7 9
program              : 0
statement            : 1 2 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement statement
    (3) statement -> . declaration_statement
    (4) declaration_statement -> . DCL declaration_list SMC

    DCL             shift and go to state 3

    statement                      shift and go to state 1
    declaration_statement          shift and go to state 2
    program                        shift and go to state 4

state 1

    (1) program -> statement .
    (2) program -> statement . statement
    (3) statement -> . declaration_statement
    (4) declaration_statement -> . DCL declaration_list SMC

    $end            reduce using rule 1 (program -> statement .)
    DCL             shift and go to state 3

    statement                      shift and go to state 5
    declaration_statement          shift and go to state 2

state 2

    (3) statement -> declaration_statement .

    $end            reduce using rule 3 (statement -> declaration_statement .)
    DCL             reduce using rule 3 (statement -> declaration_statement .)


state 3

    (4) declaration_statement -> DCL . declaration_list SMC
    (5) declaration_list -> . declaration
    (6) declaration_list -> . declaration COMMA declaration_list
    (7) declaration -> . id_list
    (8) id_list -> . ID
    (9) id_list -> . id_list COMMA ID

    ID              shift and go to state 6

    id_list                        shift and go to state 8
    declaration                    shift and go to state 9
    declaration_list               shift and go to state 7

state 4

    (0) S' -> program .



state 5

    (2) program -> statement statement .

    $end            reduce using rule 2 (program -> statement statement .)


state 6

    (8) id_list -> ID .

    COMMA           reduce using rule 8 (id_list -> ID .)
    SMC             reduce using rule 8 (id_list -> ID .)


state 7

    (4) declaration_statement -> DCL declaration_list . SMC

    SMC             shift and go to state 10


state 8

    (7) declaration -> id_list .
    (9) id_list -> id_list . COMMA ID

  ! shift/reduce conflict for COMMA resolved as shift
    SMC             reduce using rule 7 (declaration -> id_list .)
    COMMA           shift and go to state 11

  ! COMMA           [ reduce using rule 7 (declaration -> id_list .) ]


state 9

    (5) declaration_list -> declaration .
    (6) declaration_list -> declaration . COMMA declaration_list

    SMC             reduce using rule 5 (declaration_list -> declaration .)
    COMMA           shift and go to state 12


state 10

    (4) declaration_statement -> DCL declaration_list SMC .

    $end            reduce using rule 4 (declaration_statement -> DCL declaration_list SMC .)
    DCL             reduce using rule 4 (declaration_statement -> DCL declaration_list SMC .)


state 11

    (9) id_list -> id_list COMMA . ID

    ID              shift and go to state 13


state 12

    (6) declaration_list -> declaration COMMA . declaration_list
    (5) declaration_list -> . declaration
    (6) declaration_list -> . declaration COMMA declaration_list
    (7) declaration -> . id_list
    (8) id_list -> . ID
    (9) id_list -> . id_list COMMA ID

    ID              shift and go to state 6

    id_list                        shift and go to state 8
    declaration                    shift and go to state 9
    declaration_list               shift and go to state 14

state 13

    (9) id_list -> id_list COMMA ID .

    COMMA           reduce using rule 9 (id_list -> id_list COMMA ID .)
    SMC             reduce using rule 9 (id_list -> id_list COMMA ID .)


state 14

    (6) declaration_list -> declaration COMMA declaration_list .

    SMC             reduce using rule 6 (declaration_list -> declaration COMMA declaration_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 8 resolved as shift
